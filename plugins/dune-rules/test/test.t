This file tests the behaviour of the `qcheck-stm` sub-command of the `dune` command
(provided by the `dune-rules` plugin).

  $ export ORTAC_ONLY_PLUGIN=dune-rules

Without the optional output argument (for the dune rules, output for the generated OCaml
has to be set), the rules are printed on stdout. This is useful to check what will be
generated.

  $ ortac dune qcheck-stm intf_spec.mli --library=lib --package=my_package --module-prefix=PrefixLib --submodule=M
  ; This file is generated by ortac dune qcheck-stm
  ; It contains the rules for generating and running QCheck-STM tests for intf_spec.mli
  
  (rule
   (alias runtest)
   (mode promote)
   (package my_package)
   (deps
    (package ortac-qcheck-stm))
   (targets intf_spec_tests.ml)
   (action
    (setenv
     ORTAC_ONLY_PLUGIN
     qcheck-stm
     (with-stdout-to
      %{targets}
      (run
       ortac
       qcheck-stm
       %{dep:intf_spec.mli}
       %{dep:intf_spec_config.ml}
       --quiet
       --module-prefix=PrefixLib
       --submodule=M)))))
  
  (test
   (name intf_spec_tests)
   (modules intf_spec_tests)
   (libraries
    lib
    qcheck-stm.stm
    qcheck-stm.sequential
    qcheck-multicoretests-util
    ortac-runtime-qcheck-stm)
   (package my_package)
   (action
    (run
     %{test}
     --verbose)))

When the optional output argument is set, rules will be written in the file.

  $ ortac dune qcheck-stm intf_spec.mli --library=lib --package=my_package --with-stdout-to=dune.inc
  $ cat dune.inc
  ; This file is generated by ortac dune qcheck-stm
  ; It contains the rules for generating and running QCheck-STM tests for intf_spec.mli
  
  (rule
   (alias runtest)
   (mode promote)
   (package my_package)
   (deps
    (package ortac-qcheck-stm))
   (targets intf_spec_tests.ml)
   (action
    (setenv
     ORTAC_ONLY_PLUGIN
     qcheck-stm
     (with-stdout-to
      %{targets}
      (run
       ortac
       qcheck-stm
       %{dep:intf_spec.mli}
       %{dep:intf_spec_config.ml}
       --quiet)))))
  
  (test
   (name intf_spec_tests)
   (modules intf_spec_tests)
   (libraries
    lib
    qcheck-stm.stm
    qcheck-stm.sequential
    qcheck-multicoretests-util
    ortac-runtime-qcheck-stm)
   (package my_package)
   (action
    (run
     %{test}
     --verbose)))

Specifying a timeout causes ORTAC_QCHECK_STM_TIMEOUT to be set before running the test

  $ ortac dune qcheck-stm intf_spec.mli --library=lib --package=my_package --timeout 10
  ; This file is generated by ortac dune qcheck-stm
  ; It contains the rules for generating and running QCheck-STM tests for intf_spec.mli
  
  (rule
   (alias runtest)
   (mode promote)
   (package my_package)
   (deps
    (package ortac-qcheck-stm))
   (targets intf_spec_tests.ml)
   (action
    (setenv
     ORTAC_ONLY_PLUGIN
     qcheck-stm
     (with-stdout-to
      %{targets}
      (run
       ortac
       qcheck-stm
       %{dep:intf_spec.mli}
       %{dep:intf_spec_config.ml}
       --quiet)))))
  
  (test
   (name intf_spec_tests)
   (modules intf_spec_tests)
   (libraries
    lib
    qcheck-stm.stm
    qcheck-stm.sequential
    qcheck-multicoretests-util
    ortac-runtime-qcheck-stm)
   (package my_package)
   (action
    (setenv
     ORTAC_QCHECK_STM_TIMEOUT
     10
     (run
      %{test}
      --verbose))))

  $ ortac dune wrapper my_lib.mli --package=my_package
  ; This file is generated by ortac dune wrapper
  ; It contains the rules for generating a wrapper for my_lib.mli
  
  (rule
   (alias runtest)
   (mode promote)
   (targets my_lib_wrapped.mli)
   (deps my_lib.mli)
   (action
    (copy
     %{deps}
     %{targets})))
  
  (rule
   (alias runtest)
   (mode promote)
   (targets my_lib_wrapped.ml)
   (deps my_lib.mli)
   (action
    (setenv
     ORTAC_ONLY_PLUGIN
     wrapper
     (with-stdout-to
      %{targets}
      (ignore-stderr
       (run
        ortac
        wrapper
        %{deps}))))))
  
  (library
   (name my_lib_wrapped)
   (modules my_lib_wrapped)
   (libraries ortac-runtime my_lib_wrapped)
   (package my_package))

  $ ortac dune wrapper my_lib.mli --package=my_package --output=named_wrapper.ml
  ; This file is generated by ortac dune wrapper
  ; It contains the rules for generating a wrapper for my_lib.mli
  
  (rule
   (alias runtest)
   (mode promote)
   (targets named_wrapper.mli)
   (deps my_lib.mli)
   (action
    (copy
     %{deps}
     %{targets})))
  
  (rule
   (alias runtest)
   (mode promote)
   (targets named_wrapper.ml)
   (deps my_lib.mli)
   (action
    (setenv
     ORTAC_ONLY_PLUGIN
     wrapper
     (with-stdout-to
      %{targets}
      (ignore-stderr
       (run
        ortac
        wrapper
        %{deps}))))))
  
  (library
   (name named_wrapper)
   (modules named_wrapper)
   (libraries ortac-runtime named_wrapper)
   (package my_package))
