(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Atomic
module Ortac_runtime = Ortac_runtime_qcheck_stm_domain
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = make 42 end)
module ModelElt =
  struct
    type nonrec elt = {
      content: int }
    let init =
      let v = 42 in
      {
        content =
          (try v
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "atomic.mli";
                            pos_lnum = 6;
                            pos_bol = 205;
                            pos_cnum = 229
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "atomic.mli";
                            pos_lnum = 6;
                            pos_bol = 205;
                            pos_cnum = 230
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int 
      | Get 
      | Set of int 
      | Exchange of int 
      | Compare_and_set of int * int 
      | Fetch_and_add of int 
      | Incr 
      | Decr 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make v -> Format.asprintf "%s %a" "make" (Util.Pp.pp_int true) v
      | Get -> Format.asprintf "%s <sut>" "get"
      | Set v_1 ->
          Format.asprintf "%s <sut> %a" "set" (Util.Pp.pp_int true) v_1
      | Exchange v_2 ->
          Format.asprintf "%s <sut> %a" "exchange" (Util.Pp.pp_int true) v_2
      | Compare_and_set (seen, v_3) ->
          Format.asprintf "%s <sut> %a %a" "compare_and_set"
            (Util.Pp.pp_int true) seen (Util.Pp.pp_int true) v_3
      | Fetch_and_add n ->
          Format.asprintf "%s <sut> %a" "fetch_and_add" (Util.Pp.pp_int true)
            n
      | Incr -> Format.asprintf "%s <sut>" "incr"
      | Decr -> Format.asprintf "%s <sut>" "decr"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             frequency
               [(1, ((pure (fun v -> Make v)) <*> small_signed_int));
               (1, (pure Get));
               (1, ((pure (fun v_1 -> Set v_1)) <*> int));
               (1, ((pure (fun v_2 -> Exchange v_2)) <*> int));
               (1,
                 (((pure (fun seen -> fun v_3 -> Compare_and_set (seen, v_3)))
                     <*> int)
                    <*> int));
               (1, ((pure (fun n -> Fetch_and_add n)) <*> int));
               (1, (pure Incr));
               (1, (pure Decr))])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make v ->
          let r__005_ =
            let open ModelElt in
              {
                content =
                  (try v
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 6;
                                    pos_bol = 205;
                                    pos_cnum = 229
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 6;
                                    pos_bol = 205;
                                    pos_cnum = 230
                                  }
                              })))
              } in
          Model.drop_n state__003_ 0
      | Get ->
          let r_1__006_ = Model.get state__003_ 0 in
          let r_1__007_ = r_1__006_ in
          Model.push (Model.drop_n state__003_ 1) r_1__007_
      | Set v_1 ->
          let r_2__008_ = Model.get state__003_ 0 in
          let r_2__009_ =
            let open ModelElt in
              {
                content =
                  (try v_1
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 15;
                                    pos_bol = 514;
                                    pos_cnum = 539
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 15;
                                    pos_bol = 514;
                                    pos_cnum = 540
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_2__009_
      | Exchange v_2 ->
          let r_3__010_ = Model.get state__003_ 0 in
          let r_3__011_ =
            let open ModelElt in
              {
                content =
                  (try v_2
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 20;
                                    pos_bol = 699;
                                    pos_cnum = 723
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 20;
                                    pos_bol = 699;
                                    pos_cnum = 724
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_3__011_
      | Compare_and_set (seen, v_3) ->
          let r_4__012_ = Model.get state__003_ 0 in
          let r_4__013_ =
            let open ModelElt in
              {
                content =
                  (try
                     if r_4__012_.content = seen
                     then v_3
                     else r_4__012_.content
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 26;
                                    pos_bol = 937;
                                    pos_cnum = 961
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "atomic.mli";
                                    pos_lnum = 26;
                                    pos_bol = 937;
                                    pos_cnum = 1006
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_4__013_
      | Fetch_and_add n ->
          let r_5__014_ = Model.get state__003_ 0 in
          let r_5__015_ =
            let open ModelElt in
              {
                content =
                  (try
                     Ortac_runtime.Gospelstdlib.int_of_integer
                       (Ortac_runtime.Gospelstdlib.(+)
                          (Ortac_runtime.Gospelstdlib.integer_of_int
                             r_5__014_.content)
                          (Ortac_runtime.Gospelstdlib.integer_of_int n))
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_5__015_
      | Incr ->
          let r_6__016_ = Model.get state__003_ 0 in
          let r_6__017_ =
            let open ModelElt in
              {
                content =
                  (try
                     Ortac_runtime.Gospelstdlib.int_of_integer
                       (Ortac_runtime.Gospelstdlib.(+)
                          (Ortac_runtime.Gospelstdlib.integer_of_int
                             r_6__016_.content)
                          (Ortac_runtime.Gospelstdlib.integer_of_int 1))
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_6__017_
      | Decr ->
          let r_7__018_ = Model.get state__003_ 0 in
          let r_7__019_ =
            let open ModelElt in
              {
                content =
                  (try
                     Ortac_runtime.Gospelstdlib.int_of_integer
                       (Ortac_runtime.Gospelstdlib.(-)
                          (Ortac_runtime.Gospelstdlib.integer_of_int
                             r_7__018_.content)
                          (Ortac_runtime.Gospelstdlib.integer_of_int 1))
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "_none_";
                                    pos_lnum = 0;
                                    pos_bol = 0;
                                    pos_cnum = (-1)
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_7__019_
    let precond cmd__047_ state__048_ =
      match cmd__047_ with
      | Make v -> true
      | Get -> true
      | Set v_1 -> true
      | Exchange v_2 -> true
      | Compare_and_set (seen, v_3) -> true
      | Fetch_and_add n -> true
      | Incr -> true
      | Decr -> true
    let postcond _ _ _ = true
    let run cmd__049_ sut__050_ =
      match cmd__049_ with
      | Make v -> Res (sut, (let res__051_ = make v in res__051_))
      | Get ->
          Res
            (int,
              (let r_1__052_ = SUT.get sut__050_ 0 in
               let res__053_ = get r_1__052_ in res__053_))
      | Set v_1 ->
          Res
            (unit,
              (let r_2__054_ = SUT.get sut__050_ 0 in
               let res__055_ = set r_2__054_ v_1 in res__055_))
      | Exchange v_2 ->
          Res
            (int,
              (let r_3__056_ = SUT.get sut__050_ 0 in
               let res__057_ = exchange r_3__056_ v_2 in res__057_))
      | Compare_and_set (seen, v_3) ->
          Res
            (bool,
              (let r_4__058_ = SUT.get sut__050_ 0 in
               let res__059_ = compare_and_set r_4__058_ seen v_3 in
               res__059_))
      | Fetch_and_add n ->
          Res
            (int,
              (let r_5__060_ = SUT.get sut__050_ 0 in
               let res__061_ = fetch_and_add r_5__060_ n in res__061_))
      | Incr ->
          Res
            (unit,
              (let r_6__062_ = SUT.get sut__050_ 0 in
               let res__063_ = incr r_6__062_ in res__063_))
      | Decr ->
          Res
            (unit,
              (let r_7__064_ = SUT.get sut__050_ 0 in
               let res__065_ = decr r_7__064_ in res__065_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__067_ models__068_ last__070_ res__069_ =
  let open Spec in
    let open STM in
      match (cmd__067_, res__069_) with
      | (Make v, Res ((SUT, _), r)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a" lhs "make" (Util.Pp.pp_int true) v
      | (Get, Res ((Int, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "get"
            (Model.get_name models__068_ (0 + shift))
      | (Set v_1, Res ((Unit, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "set"
            (Model.get_name models__068_ (0 + shift)) (Util.Pp.pp_int true)
            v_1
      | (Exchange v_2, Res ((Int, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "exchange"
            (Model.get_name models__068_ (0 + shift)) (Util.Pp.pp_int true)
            v_2
      | (Compare_and_set (seen, v_3), Res ((Bool, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a %a" lhs "compare_and_set"
            (Model.get_name models__068_ (0 + shift)) (Util.Pp.pp_int true)
            seen (Util.Pp.pp_int true) v_3
      | (Fetch_and_add n, Res ((Int, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "fetch_and_add"
            (Model.get_name models__068_ (0 + shift)) (Util.Pp.pp_int true) n
      | (Incr, Res ((Unit, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "incr"
            (Model.get_name models__068_ (0 + shift))
      | (Decr, Res ((Unit, _), _)) ->
          let lhs = if last__070_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "decr"
            (Model.get_name models__068_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__020_ state__021_ res__022_ =
  let open Spec in
    let open STM in
      let new_state__023_ = lazy (next_state cmd__020_ state__021_) in
      match (cmd__020_, res__022_) with
      | (Make v, Res ((SUT, _), r)) -> None
      | (Get, Res ((Int, _), v_4)) ->
          if
            let r_old__026_ = Model.get state__021_ 0
            and r_new__027_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try v_4 = (Lazy.force r_new__027_).content with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Atomic" "make 42"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (int,
                           (let r_old__024_ = Model.get state__021_ 0
                            and r_new__025_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            (Lazy.force r_new__025_).content)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "get"
                 [("v = r.content",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 10;
                          pos_bol = 343;
                          pos_cnum = 355
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 10;
                          pos_bol = 343;
                          pos_cnum = 368
                        }
                    })])
      | (Set v_1, Res ((Unit, _), _)) -> None
      | (Exchange v_2, Res ((Int, _), res_1)) ->
          if
            let r_old__032_ = Model.get state__021_ 0
            and r_new__033_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try res_1 = r_old__032_.content with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Atomic" "make 42"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (int,
                           (let r_old__030_ = Model.get state__021_ 0
                            and r_new__031_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            r_old__030_.content)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "exchange"
                 [("res = old r.content",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 21;
                          pos_bol = 725;
                          pos_cnum = 737
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 21;
                          pos_bol = 725;
                          pos_cnum = 756
                        }
                    })])
      | (Compare_and_set (seen, v_3), Res ((Bool, _), b)) ->
          if
            let r_old__037_ = Model.get state__021_ 0
            and r_new__038_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try (b = true) = (r_old__037_.content = seen) with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Atomic" "make 42"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (bool,
                           (let r_old__035_ = Model.get state__021_ 0
                            and r_new__036_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            r_old__035_.content = seen)))
                  with | e -> Ortac_runtime.Report.Out_of_domain)
                 "compare_and_set"
                 [("b <-> old r.content = seen",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 27;
                          pos_bol = 1007;
                          pos_cnum = 1019
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 27;
                          pos_bol = 1007;
                          pos_cnum = 1045
                        }
                    })])
      | (Fetch_and_add n, Res ((Int, _), res_2)) ->
          if
            let r_old__042_ = Model.get state__021_ 0
            and r_new__043_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try res_2 = r_old__042_.content with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Atomic" "make 42"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (int,
                           (let r_old__040_ = Model.get state__021_ 0
                            and r_new__041_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            r_old__040_.content)))
                  with | e -> Ortac_runtime.Report.Out_of_domain)
                 "fetch_and_add"
                 [("res = old r.content",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 33;
                          pos_bol = 1271;
                          pos_cnum = 1283
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "atomic.mli";
                          pos_lnum = 33;
                          pos_bol = 1271;
                          pos_cnum = 1302
                        }
                    })])
      | (Incr, Res ((Unit, _), _)) -> None
      | (Decr, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Atomic STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
