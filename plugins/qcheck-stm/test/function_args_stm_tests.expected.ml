(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Function_args
module Ortac_runtime = Ortac_runtime_qcheck_stm_sequential
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = t
                                  let init () = make 16 'a' end)
module ModelElt =
  struct
    type nonrec elt =
      {
      size: Ortac_runtime.integer ;
      contents: char Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let len = 16
      and c = 'a' in
      {
        size =
          (try Ortac_runtime.Gospelstdlib.integer_of_int len
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "function_args.mli";
                            pos_lnum = 8;
                            pos_bol = 308;
                            pos_cnum = 329
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "function_args.mli";
                            pos_lnum = 8;
                            pos_bol = 308;
                            pos_cnum = 332
                          }
                      })));
        contents =
          (try
             Ortac_runtime.Gospelstdlib.Sequence.init
               (Ortac_runtime.Gospelstdlib.integer_of_int len) (fun j -> c)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "function_args.mli";
                            pos_lnum = 9;
                            pos_bol = 333;
                            pos_cnum = 358
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "function_args.mli";
                            pos_lnum = 9;
                            pos_bol = 333;
                            pos_cnum = 388
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int * char 
      | Map of (char -> char) QCheck.fun_ 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make (len, c) ->
          Format.asprintf "protect (fun () -> %s %a %a)" "make"
            (Util.Pp.pp_int true) len (Util.Pp.pp_char true) c
      | Map f -> Format.asprintf "%s %a <sut>" "map" (Util.Pp.pp_fun_ true) f
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             frequency
               [(1,
                  (((pure (fun len -> fun c -> Make (len, c))) <*>
                      small_signed_int)
                     <*> char));
               (1,
                 ((pure (fun f -> Map f)) <*>
                    (fun1 Observable.char QCheck.char).gen))])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make (len, c) ->
          if
            (try
               Ortac_runtime.Gospelstdlib.(>=)
                 (Ortac_runtime.Gospelstdlib.integer_of_int len)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with | e -> false)
          then
            let t_1__005_ =
              let open ModelElt in
                {
                  size =
                    (try Ortac_runtime.Gospelstdlib.integer_of_int len
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "function_args.mli";
                                      pos_lnum = 8;
                                      pos_bol = 308;
                                      pos_cnum = 329
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "function_args.mli";
                                      pos_lnum = 8;
                                      pos_bol = 308;
                                      pos_cnum = 332
                                    }
                                })));
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.Sequence.init
                         (Ortac_runtime.Gospelstdlib.integer_of_int len)
                         (fun j -> c)
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "function_args.mli";
                                      pos_lnum = 9;
                                      pos_bol = 333;
                                      pos_cnum = 358
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "function_args.mli";
                                      pos_lnum = 9;
                                      pos_bol = 333;
                                      pos_cnum = 388
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 0) t_1__005_
          else state__003_
      | Map f ->
          let input__006_ = Model.get state__003_ 0 in
          let output__009_ =
            let open ModelElt in
              {
                size =
                  (try input__006_.size
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 13;
                                    pos_bol = 571;
                                    pos_cnum = 597
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 13;
                                    pos_bol = 571;
                                    pos_cnum = 607
                                  }
                              })));
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.init
                       input__006_.size
                       (fun j_1 ->
                          QCheck.Fn.apply f
                            (Ortac_runtime.Gospelstdlib.__mix_Bub
                               input__006_.contents j_1))
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 14;
                                    pos_bol = 608;
                                    pos_cnum = 638
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 14;
                                    pos_bol = 608;
                                    pos_cnum = 693
                                  }
                              })))
              }
          and input__008_ = input__006_ in
          Model.push (Model.push (Model.drop_n state__003_ 1) input__008_)
            output__009_
    let precond cmd__015_ state__016_ =
      match cmd__015_ with | Make (len, c) -> true | Map f -> true
    let postcond _ _ _ = true
    let run cmd__017_ sut__018_ =
      match cmd__017_ with
      | Make (len, c) ->
          Res
            ((result sut exn),
              (let res__019_ = protect (fun () -> make len c) () in
               ((match res__019_ with
                 | Ok res -> SUT.push sut__018_ res
                 | Error _ -> ());
                res__019_)))
      | Map f ->
          Res
            (sut,
              (let input__020_ = SUT.get sut__018_ 0 in
               let res__021_ = map (QCheck.Fn.apply f) input__020_ in
               (SUT.push sut__018_ res__021_; res__021_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__023_ models__024_ last__026_ res__025_ =
  let open Spec in
    let open STM in
      match (cmd__023_, res__025_) with
      | (Make (len, c), Res ((Result (SUT, Exn), _), t_1)) ->
          let lhs =
            if last__026_
            then "r"
            else
              (match t_1 with
               | Ok _ -> "Ok " ^ (Model.get_name models__024_ 0)
               | Error _ -> "_")
          and shift = match t_1 with | Ok _ -> 1 | Error _ -> 0 in
          Format.asprintf "let %s = protect (fun () -> %s %a %a)" lhs "make"
            (Util.Pp.pp_int true) len (Util.Pp.pp_char true) c
      | (Map f, Res ((SUT, _), output)) ->
          let lhs = if last__026_ then "r" else Model.get_name models__024_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a %s" lhs "map"
            (Util.Pp.pp_fun_ true) f
            (Model.get_name models__024_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__010_ state__011_ res__012_ =
  let open Spec in
    let open STM in
      let new_state__013_ = lazy (next_state cmd__010_ state__011_) in
      match (cmd__010_, res__012_) with
      | (Make (len, c), Res ((Result (SUT, Exn), _), t_1)) ->
          (match if
                   try
                     Ortac_runtime.Gospelstdlib.(>=)
                       (Ortac_runtime.Gospelstdlib.integer_of_int len)
                       (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   with | e -> false
                 then None
                 else
                   Some
                     (Ortac_runtime.Report.report "Function_args"
                        "make 16 'a'"
                        (try
                           Ortac_runtime.Report.Exception "Invalid_argument"
                         with | e -> Ortac_runtime.Report.Out_of_domain)
                        "make"
                        [("len >= 0",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "function_args.mli";
                                 pos_lnum = 7;
                                 pos_bol = 288;
                                 pos_cnum = 299
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "function_args.mli";
                                 pos_lnum = 7;
                                 pos_bol = 288;
                                 pos_cnum = 307
                               }
                           })])
           with
           | None -> (match t_1 with | Ok t_1 -> None | _ -> None)
           | _ ->
               (match t_1 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      (try
                         Ortac_runtime.Gospelstdlib.(>=)
                           (Ortac_runtime.Gospelstdlib.integer_of_int len)
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       with | e -> false)
                    then None
                    else
                      Some
                        (Ortac_runtime.Report.report "Function_args"
                           "make 16 'a'"
                           (try
                              Ortac_runtime.Report.Exception
                                "Invalid_argument"
                            with | e -> Ortac_runtime.Report.Out_of_domain)
                           "make"
                           [("len >= 0",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 7;
                                    pos_bol = 288;
                                    pos_cnum = 299
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "function_args.mli";
                                    pos_lnum = 7;
                                    pos_bol = 288;
                                    pos_cnum = 307
                                  }
                              })])))
      | (Map f, Res ((SUT, _), output)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Function_args STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
