(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Queue
module Ortac_runtime = Ortac_runtime_qcheck_stm_sequential
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = create () end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 269
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "queue.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 283
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 2
    type state = Model.t
    let init_state = Model.create 2 ()
    type cmd =
      | Create of unit 
      | Add of int 
      | Push of int 
      | Take 
      | Take_opt 
      | Pop 
      | Peek 
      | Top 
      | Peek_opt 
      | Clear 
      | Copy 
      | Is_empty 
      | Length 
      | Transfer 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Add v -> Format.asprintf "%s %a <sut>" "add" (Util.Pp.pp_int true) v
      | Push v_1 ->
          Format.asprintf "%s %a <sut>" "push" (Util.Pp.pp_int true) v_1
      | Take -> Format.asprintf "protect (fun () -> %s <sut>)" "take"
      | Take_opt -> Format.asprintf "%s <sut>" "take_opt"
      | Pop -> Format.asprintf "protect (fun () -> %s <sut>)" "pop"
      | Peek -> Format.asprintf "protect (fun () -> %s <sut>)" "peek"
      | Top -> Format.asprintf "protect (fun () -> %s <sut>)" "top"
      | Peek_opt -> Format.asprintf "%s <sut>" "peek_opt"
      | Clear -> Format.asprintf "%s <sut>" "clear"
      | Copy -> Format.asprintf "%s <sut>" "copy"
      | Is_empty -> Format.asprintf "%s <sut>" "is_empty"
      | Length -> Format.asprintf "%s <sut>" "length"
      | Transfer -> Format.asprintf "%s <sut> <sut>" "transfer"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun () -> Create ())) <*> unit;
               (pure (fun v -> Add v)) <*> int;
               (pure (fun v_1 -> Push v_1)) <*> int;
               pure Take;
               pure Take_opt;
               pure Pop;
               pure Peek;
               pure Top;
               pure Peek_opt;
               pure Clear;
               pure Copy;
               pure Is_empty;
               pure Length;
               pure Transfer])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create () ->
          let t_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 269
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 283
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) t_1__005_
      | Add v ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.snoc
                       t_2__006_.contents v
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 13;
                                    pos_bol = 439;
                                    pos_cnum = 464
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 13;
                                    pos_bol = 439;
                                    pos_cnum = 496
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Push v_1 ->
          let t_3__008_ = Model.get state__003_ 0 in
          let t_3__009_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.snoc
                       t_3__008_.contents v_1
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 18;
                                    pos_bol = 673;
                                    pos_cnum = 698
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 18;
                                    pos_bol = 673;
                                    pos_cnum = 730
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_3__009_
      | Take ->
          let t_4__010_ = Model.get state__003_ 0 in
          let t_4__012_ =
            let open ModelElt in
              {
                contents =
                  (try
                     match Ortac_runtime.Gospelstdlib.Sequence.length
                             t_4__010_.contents
                     with
                     | __x__011_ when
                         (=) __x__011_
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         -> Ortac_runtime.Gospelstdlib.Sequence.empty
                     | _ ->
                         Ortac_runtime.Gospelstdlib.Sequence.tl
                           t_4__010_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 24;
                                    pos_bol = 966;
                                    pos_cnum = 991
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 26;
                                    pos_bol = 1065;
                                    pos_cnum = 1108
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_4__012_
      | Take_opt ->
          let t_5__013_ = Model.get state__003_ 0 in
          let t_5__014_ =
            let open ModelElt in
              {
                contents =
                  (try
                     if
                       (Ortac_runtime.Gospelstdlib.Sequence.length
                          t_5__013_.contents)
                         = (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                     then t_5__013_.contents
                     else
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         t_5__013_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 33;
                                    pos_bol = 1371;
                                    pos_cnum = 1396
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 34;
                                    pos_bol = 1441;
                                    pos_cnum = 1497
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_5__014_
      | Pop ->
          let t_6__015_ = Model.get state__003_ 0 in
          let t_6__017_ =
            let open ModelElt in
              {
                contents =
                  (try
                     match Ortac_runtime.Gospelstdlib.Sequence.length
                             t_6__015_.contents
                     with
                     | __x__016_ when
                         (=) __x__016_
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         -> Ortac_runtime.Gospelstdlib.Sequence.empty
                     | _ ->
                         Ortac_runtime.Gospelstdlib.Sequence.tl
                           t_6__015_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 42;
                                    pos_bol = 1839;
                                    pos_cnum = 1864
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 44;
                                    pos_bol = 1938;
                                    pos_cnum = 1981
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_6__017_
      | Peek ->
          let t_7__018_ = Model.get state__003_ 0 in
          let t_7__019_ = t_7__018_ in
          Model.push (Model.drop_n state__003_ 1) t_7__019_
      | Top ->
          let t_8__020_ = Model.get state__003_ 0 in
          let t_8__021_ = t_8__020_ in
          Model.push (Model.drop_n state__003_ 1) t_8__021_
      | Peek_opt ->
          let t_9__022_ = Model.get state__003_ 0 in
          let t_9__023_ = t_9__022_ in
          Model.push (Model.drop_n state__003_ 1) t_9__023_
      | Clear ->
          let t_10__024_ = Model.get state__003_ 0 in
          let t_10__025_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 67;
                                    pos_bol = 2957;
                                    pos_cnum = 2982
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 67;
                                    pos_bol = 2957;
                                    pos_cnum = 2996
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_10__025_
      | Copy ->
          let t_11__026_ = Model.get state__003_ 0 in
          let r__029_ =
            let open ModelElt in
              {
                contents =
                  (try t_11__026_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 71;
                                    pos_bol = 3127;
                                    pos_cnum = 3152
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 71;
                                    pos_bol = 3127;
                                    pos_cnum = 3162
                                  }
                              })))
              }
          and t_11__028_ = t_11__026_ in
          Model.push (Model.push (Model.drop_n state__003_ 1) t_11__028_)
            r__029_
      | Is_empty ->
          let t_12__030_ = Model.get state__003_ 0 in
          let t_12__031_ = t_12__030_ in
          Model.push (Model.drop_n state__003_ 1) t_12__031_
      | Length ->
          let t_13__032_ = Model.get state__003_ 0 in
          let t_13__033_ = t_13__032_ in
          Model.push (Model.drop_n state__003_ 1) t_13__033_
      | Transfer ->
          let t1__034_ = Model.get state__003_ 0
          and t2__035_ = Model.get state__003_ 1 in
          let t1__037_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 87;
                                    pos_bol = 3748;
                                    pos_cnum = 3774
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 87;
                                    pos_bol = 3748;
                                    pos_cnum = 3788
                                  }
                              })))
              }
          and t2__036_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.append
                       t1__034_.contents t2__035_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 88;
                                    pos_bol = 3789;
                                    pos_cnum = 3815
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "queue.mli";
                                    pos_lnum = 88;
                                    pos_bol = 3789;
                                    pos_cnum = 3866
                                  }
                              })))
              } in
          Model.push (Model.push (Model.drop_n state__003_ 2) t2__036_)
            t1__037_
    let precond cmd__108_ state__109_ =
      match cmd__108_ with
      | Create () -> true
      | Add v -> true
      | Push v_1 -> true
      | Take -> true
      | Take_opt -> true
      | Pop -> true
      | Peek -> true
      | Top -> true
      | Peek_opt -> true
      | Clear -> true
      | Copy -> true
      | Is_empty -> true
      | Length -> true
      | Transfer -> true
    let postcond _ _ _ = true
    let run cmd__110_ sut__111_ =
      match cmd__110_ with
      | Create () ->
          Res
            (sut,
              (let res__112_ = create () in
               (SUT.push sut__111_ res__112_; res__112_)))
      | Add v ->
          Res
            (unit,
              (let t_2__113_ = SUT.get sut__111_ 0 in
               let res__114_ = add v t_2__113_ in res__114_))
      | Push v_1 ->
          Res
            (unit,
              (let t_3__115_ = SUT.get sut__111_ 0 in
               let res__116_ = push v_1 t_3__115_ in res__116_))
      | Take ->
          Res
            ((result int exn),
              (let t_4__117_ = SUT.get sut__111_ 0 in
               let res__118_ = protect (fun () -> take t_4__117_) () in
               res__118_))
      | Take_opt ->
          Res
            ((option int),
              (let t_5__119_ = SUT.get sut__111_ 0 in
               let res__120_ = take_opt t_5__119_ in res__120_))
      | Pop ->
          Res
            ((result int exn),
              (let t_6__121_ = SUT.get sut__111_ 0 in
               let res__122_ = protect (fun () -> pop t_6__121_) () in
               res__122_))
      | Peek ->
          Res
            ((result int exn),
              (let t_7__123_ = SUT.get sut__111_ 0 in
               let res__124_ = protect (fun () -> peek t_7__123_) () in
               res__124_))
      | Top ->
          Res
            ((result int exn),
              (let t_8__125_ = SUT.get sut__111_ 0 in
               let res__126_ = protect (fun () -> top t_8__125_) () in
               res__126_))
      | Peek_opt ->
          Res
            ((option int),
              (let t_9__127_ = SUT.get sut__111_ 0 in
               let res__128_ = peek_opt t_9__127_ in res__128_))
      | Clear ->
          Res
            (unit,
              (let t_10__129_ = SUT.get sut__111_ 0 in
               let res__130_ = clear t_10__129_ in res__130_))
      | Copy ->
          Res
            (sut,
              (let t_11__131_ = SUT.get sut__111_ 0 in
               let res__132_ = copy t_11__131_ in
               (SUT.push sut__111_ res__132_; res__132_)))
      | Is_empty ->
          Res
            (bool,
              (let t_12__133_ = SUT.get sut__111_ 0 in
               let res__134_ = is_empty t_12__133_ in res__134_))
      | Length ->
          Res
            (int,
              (let t_13__135_ = SUT.get sut__111_ 0 in
               let res__136_ = length t_13__135_ in res__136_))
      | Transfer ->
          Res
            (unit,
              (let t1__137_ = SUT.get sut__111_ 0 in
               let t2__138_ = SUT.get sut__111_ 1 in
               let res__139_ = transfer t1__137_ t2__138_ in res__139_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__141_ state__142_ last__144_ res__143_ =
  let open Spec in
    let open STM in
      match (cmd__141_, res__143_) with
      | (Create (), Res ((SUT, _), t_1)) ->
          let lhs = if last__144_ then "r" else SUT.get_name state__142_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Add v, Res ((Unit, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %s" lhs "add" (Util.Pp.pp_int true)
            v (SUT.get_name state__142_ (0 + shift))
      | (Push v_1, Res ((Unit, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %s" lhs "push"
            (Util.Pp.pp_int true) v_1 (SUT.get_name state__142_ (0 + shift))
      | (Take, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "take"
            (SUT.get_name state__142_ (0 + shift))
      | (Take_opt, Res ((Option (Int), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "take_opt"
            (SUT.get_name state__142_ (0 + shift))
      | (Pop, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "pop"
            (SUT.get_name state__142_ (0 + shift))
      | (Peek, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "peek"
            (SUT.get_name state__142_ (0 + shift))
      | (Top, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "top"
            (SUT.get_name state__142_ (0 + shift))
      | (Peek_opt, Res ((Option (Int), _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "peek_opt"
            (SUT.get_name state__142_ (0 + shift))
      | (Clear, Res ((Unit, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "clear"
            (SUT.get_name state__142_ (0 + shift))
      | (Copy, Res ((SUT, _), r)) ->
          let lhs = if last__144_ then "r" else SUT.get_name state__142_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %s" lhs "copy"
            (SUT.get_name state__142_ (0 + shift))
      | (Is_empty, Res ((Bool, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "is_empty"
            (SUT.get_name state__142_ (0 + shift))
      | (Length, Res ((Int, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "length"
            (SUT.get_name state__142_ (0 + shift))
      | (Transfer, Res ((Unit, _), _)) ->
          let lhs = if last__144_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %s" lhs "transfer"
            (SUT.get_name state__142_ (0 + shift))
            (SUT.get_name state__142_ (1 + shift))
      | _ -> assert false
let ortac_postcond cmd__038_ state__039_ res__040_ =
  let open Spec in
    let open STM in
      let new_state__041_ = lazy (next_state cmd__038_ state__039_) in
      match (cmd__038_, res__040_) with
      | (Create (), Res ((SUT, _), t_1)) -> None
      | (Add v, Res ((Unit, _), _)) -> None
      | (Push v_1, Res ((Unit, _), _)) -> None
      | (Take, Res ((Result (Int, Exn), _), v_2)) ->
          (match v_2 with
           | Ok v_2 ->
               Ortac_runtime.Report.append
                 (if
                    let t_old__046_ = Model.get state__039_ 0
                    and t_new__047_ =
                      lazy (Model.get (Lazy.force new_state__041_) 0) in
                    try
                      v_2 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           t_old__046_.contents)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Queue" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (int,
                                   (let t_old__044_ = Model.get state__039_ 0
                                    and t_new__045_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__041_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__044_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "take"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 27;
                                  pos_bol = 1109;
                                  pos_cnum = 1121
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 27;
                                  pos_bol = 1109;
                                  pos_cnum = 1153
                                }
                            })]))
                 (if
                    let t_old__048_ = Model.get state__039_ 0
                    and t_new__049_ =
                      lazy (Model.get (Lazy.force new_state__041_) 0) in
                    try
                      not
                        (t_old__048_.contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Queue" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (int,
                                   (let t_old__044_ = Model.get state__039_ 0
                                    and t_new__045_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__041_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__044_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "take"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 28;
                                  pos_bol = 1154;
                                  pos_cnum = 1166
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 28;
                                  pos_bol = 1154;
                                  pos_cnum = 1198
                                }
                            })]))
           | Error (Empty) ->
               if
                 let t_old__050_ = Model.get state__039_ 0
                 and t_new__051_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    let __t1__052_ =
                      (Lazy.force t_new__051_).contents =
                        t_old__050_.contents in
                    let __t2__053_ =
                      t_old__050_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__052_ && __t2__053_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "take"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 22;
                               pos_bol = 877;
                               pos_cnum = 897
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 22;
                               pos_bol = 877;
                               pos_cnum = 941
                             }
                         })])
           | _ -> None)
      | (Take_opt, Res ((Option (Int), _), r_1)) ->
          if
            let t_old__057_ = Model.get state__039_ 0
            and t_new__058_ = lazy (Model.get (Lazy.force new_state__041_) 0) in
            (try
               r_1 =
                 (if
                    t_old__057_.contents =
                      Ortac_runtime.Gospelstdlib.Sequence.empty
                  then None
                  else
                    Some
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         t_old__057_.contents))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Queue" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         ((option int),
                           (let t_old__055_ = Model.get state__039_ 0
                            and t_new__056_ =
                              lazy (Model.get (Lazy.force new_state__041_) 0) in
                            if
                              t_old__055_.contents =
                                Ortac_runtime.Gospelstdlib.Sequence.empty
                            then None
                            else
                              Some
                                (Ortac_runtime.Gospelstdlib.Sequence.hd
                                   t_old__055_.contents))))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "take_opt"
                 [("r = if (old t.contents) = Sequence.empty then\n        None else Some (Sequence.hd (old t.contents))",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 35;
                          pos_bol = 1498;
                          pos_cnum = 1510
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 36;
                          pos_bol = 1556;
                          pos_cnum = 1609
                        }
                    })])
      | (Pop, Res ((Result (Int, Exn), _), v_3)) ->
          (match v_3 with
           | Ok v_3 ->
               Ortac_runtime.Report.append
                 (if
                    let t_old__062_ = Model.get state__039_ 0
                    and t_new__063_ =
                      lazy (Model.get (Lazy.force new_state__041_) 0) in
                    try
                      v_3 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           t_old__062_.contents)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Queue" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (int,
                                   (let t_old__060_ = Model.get state__039_ 0
                                    and t_new__061_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__041_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__060_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "pop"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 45;
                                  pos_bol = 1982;
                                  pos_cnum = 1994
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 45;
                                  pos_bol = 1982;
                                  pos_cnum = 2026
                                }
                            })]))
                 (if
                    let t_old__064_ = Model.get state__039_ 0
                    and t_new__065_ =
                      lazy (Model.get (Lazy.force new_state__041_) 0) in
                    try
                      not
                        (t_old__064_.contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Queue" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (int,
                                   (let t_old__060_ = Model.get state__039_ 0
                                    and t_new__061_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__041_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__060_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "pop"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 46;
                                  pos_bol = 2027;
                                  pos_cnum = 2039
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 46;
                                  pos_bol = 2027;
                                  pos_cnum = 2071
                                }
                            })]))
           | Error (Empty) ->
               if
                 let t_old__066_ = Model.get state__039_ 0
                 and t_new__067_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    let __t1__068_ =
                      (Lazy.force t_new__067_).contents =
                        t_old__066_.contents in
                    let __t2__069_ =
                      t_old__066_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__068_ && __t2__069_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "pop"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 40;
                               pos_bol = 1750;
                               pos_cnum = 1770
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 40;
                               pos_bol = 1750;
                               pos_cnum = 1814
                             }
                         })])
           | _ -> None)
      | (Peek, Res ((Result (Int, Exn), _), v_4)) ->
          (match v_4 with
           | Ok v_4 ->
               if
                 let t_old__073_ = Model.get state__039_ 0
                 and t_new__074_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    v_4 =
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force t_new__074_).contents)
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try
                         Ortac_runtime.Report.Protected_value
                           (Res
                              (int,
                                (let t_old__071_ = Model.get state__039_ 0
                                 and t_new__072_ =
                                   lazy
                                     (Model.get (Lazy.force new_state__041_)
                                        0) in
                                 Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force t_new__072_).contents)))
                       with | e -> Ortac_runtime.Report.Out_of_domain) "peek"
                      [("v = Sequence.hd t.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 51;
                               pos_bol = 2270;
                               pos_cnum = 2282
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 51;
                               pos_bol = 2270;
                               pos_cnum = 2308
                             }
                         })])
           | Error (Empty) ->
               if
                 let t_old__075_ = Model.get state__039_ 0
                 and t_new__076_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    let __t1__077_ =
                      (Lazy.force t_new__076_).contents =
                        t_old__075_.contents in
                    let __t2__078_ =
                      t_old__075_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__077_ && __t2__078_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "peek"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 50;
                               pos_bol = 2205;
                               pos_cnum = 2225
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 50;
                               pos_bol = 2205;
                               pos_cnum = 2269
                             }
                         })])
           | _ -> None)
      | (Top, Res ((Result (Int, Exn), _), v_5)) ->
          (match v_5 with
           | Ok v_5 ->
               if
                 let t_old__082_ = Model.get state__039_ 0
                 and t_new__083_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    v_5 =
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force t_new__083_).contents)
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try
                         Ortac_runtime.Report.Protected_value
                           (Res
                              (int,
                                (let t_old__080_ = Model.get state__039_ 0
                                 and t_new__081_ =
                                   lazy
                                     (Model.get (Lazy.force new_state__041_)
                                        0) in
                                 Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force t_new__081_).contents)))
                       with | e -> Ortac_runtime.Report.Out_of_domain) "top"
                      [("v = Sequence.hd t.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 56;
                               pos_bol = 2499;
                               pos_cnum = 2511
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 56;
                               pos_bol = 2499;
                               pos_cnum = 2537
                             }
                         })])
           | Error (Empty) ->
               if
                 let t_old__084_ = Model.get state__039_ 0
                 and t_new__085_ =
                   lazy (Model.get (Lazy.force new_state__041_) 0) in
                 (try
                    let __t1__086_ =
                      (Lazy.force t_new__085_).contents =
                        t_old__084_.contents in
                    let __t2__087_ =
                      t_old__084_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__086_ && __t2__087_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Queue" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "top"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 55;
                               pos_bol = 2434;
                               pos_cnum = 2454
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 55;
                               pos_bol = 2434;
                               pos_cnum = 2498
                             }
                         })])
           | _ -> None)
      | (Peek_opt, Res ((Option (Int), _), v_6)) ->
          if
            let t_old__089_ = Model.get state__039_ 0
            and t_new__090_ = lazy (Model.get (Lazy.force new_state__041_) 0) in
            (try
               (match v_6 with
                | None ->
                    if
                      (Lazy.force t_new__090_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then true
                    else false
                | Some a_1 ->
                    if
                      a_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force t_new__090_).contents)
                    then true
                    else false)
                 = true
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Queue" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res (Ortac_runtime.Report.dummy, ()))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "peek_opt"
                 [("match v with\n        | None -> t.contents = Sequence.empty\n        | Some a -> a = Sequence.hd t.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 60;
                          pos_bol = 2680;
                          pos_cnum = 2692
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 62;
                          pos_bol = 2751;
                          pos_cnum = 2797
                        }
                    })])
      | (Clear, Res ((Unit, _), _)) -> None
      | (Copy, Res ((SUT, _), r)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let t_old__097_ = Model.get state__039_ 0
            and t_new__098_ = lazy (Model.get (Lazy.force new_state__041_) 0) in
            (try
               b =
                 (match Ortac_runtime.Gospelstdlib.Sequence.length
                          (Lazy.force t_new__098_).contents
                  with
                  | __x__099_ when
                      (=) __x__099_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> true
                  | _ -> false)
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Queue" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (bool,
                           (let t_old__094_ = Model.get state__039_ 0
                            and t_new__095_ =
                              lazy (Model.get (Lazy.force new_state__041_) 0) in
                            match Ortac_runtime.Gospelstdlib.Sequence.length
                                    (Lazy.force t_new__095_).contents
                            with
                            | __x__096_ when
                                (=) __x__096_
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     0)
                                -> true
                            | _ -> false)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "is_empty"
                 [("b = match Sequence.length t.contents with\n        | 0 -> true\n        | _ -> false",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 75;
                          pos_bol = 3297;
                          pos_cnum = 3309
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 77;
                          pos_bol = 3371;
                          pos_cnum = 3391
                        }
                    })])
      | (Length, Res ((Int, _), l)) ->
          if
            let t_old__103_ = Model.get state__039_ 0
            and t_new__104_ = lazy (Model.get (Lazy.force new_state__041_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int l) =
                 (Ortac_runtime.Gospelstdlib.Sequence.length
                    (Lazy.force t_new__104_).contents)
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Queue" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (integer,
                           (let t_old__101_ = Model.get state__039_ 0
                            and t_new__102_ =
                              lazy (Model.get (Lazy.force new_state__041_) 0) in
                            Ortac_runtime.Gospelstdlib.Sequence.length
                              (Lazy.force t_new__102_).contents)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "length"
                 [("l = Sequence.length t.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 81;
                          pos_bol = 3506;
                          pos_cnum = 3518
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 81;
                          pos_bol = 3506;
                          pos_cnum = 3548
                        }
                    })])
      | (Transfer, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Queue STM tests" 2 check_init_state
        ortac_show_cmd ortac_postcond])
