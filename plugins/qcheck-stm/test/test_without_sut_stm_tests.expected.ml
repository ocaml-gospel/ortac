(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Test_without_sut
module Ortac_runtime = Ortac_runtime_qcheck_stm_sequential
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = make 16 0 end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let i = 16
      and a_1 = 0 in
      {
        contents =
          (try
             Ortac_runtime.Gospelstdlib.Sequence.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i) (fun j -> a_1)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "test_without_sut.mli";
                            pos_lnum = 7;
                            pos_bol = 291;
                            pos_cnum = 316
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "test_without_sut.mli";
                            pos_lnum = 7;
                            pos_bol = 291;
                            pos_cnum = 344
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 0
    type state = Model.t
    let init_state = Model.create 0 ()
    type cmd =
      | Make of int * int 
      | Add of int * int 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make (i, a_1) ->
          Format.asprintf "protect (fun () -> %s %a %a)" "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_int true) a_1
      | Add (a_2, b) ->
          Format.asprintf "%s %a %a" "add" (Util.Pp.pp_int true) a_2
            (Util.Pp.pp_int true) b
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun i -> fun a_1 -> Make (i, a_1))) <*>
                   small_signed_int)
                  <*> small_signed_int;
               ((pure (fun a_2 -> fun b -> Add (a_2, b))) <*> int) <*> int])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make (i, a_1) ->
          if
            (try
               Ortac_runtime.Gospelstdlib.(>=)
                 (Ortac_runtime.Gospelstdlib.integer_of_int i)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with | e -> false)
          then
            let t_1__005_ =
              let open ModelElt in
                {
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.Sequence.init
                         (Ortac_runtime.Gospelstdlib.integer_of_int i)
                         (fun j -> a_1)
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "test_without_sut.mli";
                                      pos_lnum = 7;
                                      pos_bol = 291;
                                      pos_cnum = 316
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "test_without_sut.mli";
                                      pos_lnum = 7;
                                      pos_bol = 291;
                                      pos_cnum = 344
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 0) t_1__005_
          else state__003_
      | Add (a_2, b) -> state__003_
    let precond cmd__010_ state__011_ =
      match cmd__010_ with | Make (i, a_1) -> true | Add (a_2, b) -> true
    let postcond _ _ _ = true
    let run cmd__012_ sut__013_ =
      match cmd__012_ with
      | Make (i, a_1) ->
          Res
            ((result sut exn),
              (let res__014_ = protect (fun () -> make i a_1) () in
               ((match res__014_ with
                 | Ok res -> SUT.push sut__013_ res
                 | Error _ -> ());
                res__014_)))
      | Add (a_2, b) -> Res (int, (let res__015_ = add a_2 b in res__015_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__017_ state__018_ last__020_ res__019_ =
  let open Spec in
    let open STM in
      match (cmd__017_, res__019_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          let lhs =
            if last__020_
            then "r"
            else
              (match t_1 with
               | Ok _ -> "Ok " ^ (SUT.get_name state__018_ 0)
               | Error _ -> "_")
          and shift = match t_1 with | Ok _ -> 1 | Error _ -> 0 in
          Format.asprintf "let %s = protect (fun () -> %s %a %a)" lhs "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_int true) a_1
      | (Add (a_2, b), Res ((Int, _), _)) ->
          let lhs = if last__020_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %a" lhs "add" (Util.Pp.pp_int true)
            a_2 (Util.Pp.pp_int true) b
      | _ -> assert false
let ortac_postcond cmd__006_ state__007_ res__008_ =
  let open Spec in
    let open STM in
      let new_state__009_ = lazy (next_state cmd__006_ state__007_) in
      match (cmd__006_, res__008_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          (match if
                   try
                     Ortac_runtime.Gospelstdlib.(>=)
                       (Ortac_runtime.Gospelstdlib.integer_of_int i)
                       (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   with | e -> false
                 then None
                 else
                   Some
                     (Ortac_runtime.Report.report "Test_without_sut"
                        "make 16 0"
                        (try
                           Ortac_runtime.Report.Exception "Invalid_argument"
                         with | e -> Ortac_runtime.Report.Out_of_domain)
                        "make"
                        [("i >= 0",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "test_without_sut.mli";
                                 pos_lnum = 6;
                                 pos_bol = 273;
                                 pos_cnum = 284
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "test_without_sut.mli";
                                 pos_lnum = 6;
                                 pos_bol = 273;
                                 pos_cnum = 290
                               }
                           })])
           with
           | None -> (match t_1 with | Ok t_1 -> None | _ -> None)
           | _ ->
               (match t_1 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      (try
                         Ortac_runtime.Gospelstdlib.(>=)
                           (Ortac_runtime.Gospelstdlib.integer_of_int i)
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       with | e -> false)
                    then None
                    else
                      Some
                        (Ortac_runtime.Report.report "Test_without_sut"
                           "make 16 0"
                           (try
                              Ortac_runtime.Report.Exception
                                "Invalid_argument"
                            with | e -> Ortac_runtime.Report.Out_of_domain)
                           "make"
                           [("i >= 0",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "test_without_sut.mli";
                                    pos_lnum = 6;
                                    pos_bol = 273;
                                    pos_cnum = 284
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "test_without_sut.mli";
                                    pos_lnum = 6;
                                    pos_bol = 273;
                                    pos_cnum = 290
                                  }
                              })])))
      | (Add (a_2, b), Res ((Int, _), c)) ->
          if
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int c) =
                 (Ortac_runtime.Gospelstdlib.(+)
                    (Ortac_runtime.Gospelstdlib.integer_of_int a_2)
                    (Ortac_runtime.Gospelstdlib.integer_of_int b))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Test_without_sut" "make 16 0"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (integer,
                           (Ortac_runtime.Gospelstdlib.(+)
                              (Ortac_runtime.Gospelstdlib.integer_of_int a_2)
                              (Ortac_runtime.Gospelstdlib.integer_of_int b))))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "add"
                 [("c = a + b",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "test_without_sut.mli";
                          pos_lnum = 11;
                          pos_bol = 515;
                          pos_cnum = 527
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "test_without_sut.mli";
                          pos_lnum = 11;
                          pos_bol = 515;
                          pos_cnum = 536
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Test_without_sut STM tests" 0
        check_init_state ortac_show_cmd ortac_postcond])
