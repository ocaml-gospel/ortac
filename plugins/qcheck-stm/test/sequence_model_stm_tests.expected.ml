(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Sequence_model
module Ortac_runtime = Ortac_runtime_qcheck_stm_sequential
let length_opt s =
  try Some (Ortac_runtime.Gospelstdlib.Sequence.length s)
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 756
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 760
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init () = create ()
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: char Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "sequence_model.mli";
                            pos_lnum = 6;
                            pos_bol = 263;
                            pos_cnum = 288
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "sequence_model.mli";
                            pos_lnum = 6;
                            pos_bol = 263;
                            pos_cnum = 302
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of unit 
      | Add of char 
      | Remove 
      | Remove_ 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Add v -> Format.asprintf "%s %a <sut>" "add" (Util.Pp.pp_char true) v
      | Remove -> Format.asprintf "%s <sut>" "remove"
      | Remove_ -> Format.asprintf "%s <sut>" "remove_"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun () -> Create ())) <*> unit;
               (pure (fun v -> Add v)) <*> char;
               pure Remove;
               pure Remove_])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create () ->
          let t_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 6;
                                    pos_bol = 263;
                                    pos_cnum = 288
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 6;
                                    pos_bol = 263;
                                    pos_cnum = 302
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) t_1__005_
      | Add v ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons v
                       t_2__006_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 11;
                                    pos_bol = 475;
                                    pos_cnum = 500
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 11;
                                    pos_bol = 475;
                                    pos_cnum = 532
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Remove ->
          let t_3__008_ = Model.get state__003_ 0 in
          let t_3__010_ =
            let open ModelElt in
              {
                contents =
                  (try
                     match Ortac_runtime.Gospelstdlib.Sequence.length
                             t_3__008_.contents
                     with
                     | __x__009_ when
                         (=) __x__009_
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         -> Ortac_runtime.Gospelstdlib.Sequence.empty
                     | _ ->
                         Ortac_runtime.Gospelstdlib.Sequence.tl
                           t_3__008_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 20;
                                    pos_bol = 953;
                                    pos_cnum = 978
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 22;
                                    pos_bol = 1070;
                                    pos_cnum = 1131
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_3__010_
      | Remove_ ->
          let t_4__011_ = Model.get state__003_ 0 in
          let t_4__013_ =
            let open ModelElt in
              {
                contents =
                  (try
                     match length_opt t_4__011_.contents with
                     | Some __x__012_ when
                         (=) __x__012_
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         -> Ortac_runtime.Gospelstdlib.Sequence.empty
                     | _ ->
                         Ortac_runtime.Gospelstdlib.Sequence.tl
                           t_4__011_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 27;
                                    pos_bol = 1337;
                                    pos_cnum = 1362
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "sequence_model.mli";
                                    pos_lnum = 29;
                                    pos_bol = 1454;
                                    pos_cnum = 1515
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_4__013_
    let precond cmd__021_ state__022_ =
      match cmd__021_ with
      | Create () -> true
      | Add v -> true
      | Remove -> true
      | Remove_ -> true
    let postcond _ _ _ = true
    let run cmd__023_ sut__024_ =
      match cmd__023_ with
      | Create () ->
          Res
            (sut,
              (let res__025_ = create () in
               (SUT.push sut__024_ res__025_; res__025_)))
      | Add v ->
          Res
            (unit,
              (let t_2__026_ = SUT.get sut__024_ 0 in
               let res__027_ = add v t_2__026_ in res__027_))
      | Remove ->
          Res
            ((option char),
              (let t_3__028_ = SUT.get sut__024_ 0 in
               let res__029_ = remove t_3__028_ in res__029_))
      | Remove_ ->
          Res
            ((option char),
              (let t_4__030_ = SUT.get sut__024_ 0 in
               let res__031_ = remove_ t_4__030_ in res__031_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__033_ state__034_ last__036_ res__035_ =
  let open Spec in
    let open STM in
      match (cmd__033_, res__035_) with
      | (Create (), Res ((SUT, _), t_1)) ->
          let lhs = if last__036_ then "r" else SUT.get_name state__034_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Add v, Res ((Unit, _), _)) ->
          let lhs = if last__036_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %s" lhs "add"
            (Util.Pp.pp_char true) v (SUT.get_name state__034_ (0 + shift))
      | (Remove, Res ((Option (Char), _), _)) ->
          let lhs = if last__036_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "remove"
            (SUT.get_name state__034_ (0 + shift))
      | (Remove_, Res ((Option (Char), _), _)) ->
          let lhs = if last__036_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "remove_"
            (SUT.get_name state__034_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__014_ state__015_ res__016_ =
  let open Spec in
    let open STM in
      let new_state__017_ = lazy (next_state cmd__014_ state__015_) in
      match (cmd__014_, res__016_) with
      | (Create (), Res ((SUT, _), t_1)) -> None
      | (Add v, Res ((Unit, _), _)) -> None
      | (Remove, Res ((Option (Char), _), o)) -> None
      | (Remove_, Res ((Option (Char), _), o_1)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Sequence_model STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
