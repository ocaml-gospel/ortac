(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Stack
module Ortac_runtime = Ortac_runtime_qcheck_stm_sequential
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init () = create ()
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: char Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "stack.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 269
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "stack.mli";
                            pos_lnum = 8;
                            pos_bol = 244;
                            pos_cnum = 283
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of unit 
      | Push of char 
      | Pop 
      | Pop_opt 
      | Top 
      | Top_opt 
      | Clear 
      | Copy 
      | Is_empty 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Push v ->
          Format.asprintf "%s %a <sut>" "push" (Util.Pp.pp_char true) v
      | Pop -> Format.asprintf "protect (fun () -> %s <sut>)" "pop"
      | Pop_opt -> Format.asprintf "%s <sut>" "pop_opt"
      | Top -> Format.asprintf "protect (fun () -> %s <sut>)" "top"
      | Top_opt -> Format.asprintf "%s <sut>" "top_opt"
      | Clear -> Format.asprintf "%s <sut>" "clear"
      | Copy -> Format.asprintf "%s <sut>" "copy"
      | Is_empty -> Format.asprintf "%s <sut>" "is_empty"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun () -> Create ())) <*> unit;
               (pure (fun v -> Push v)) <*> char;
               pure Pop;
               pure Pop_opt;
               pure Top;
               pure Top_opt;
               pure Clear;
               pure Copy;
               pure Is_empty])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create () ->
          let t_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 269
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 8;
                                    pos_bol = 244;
                                    pos_cnum = 283
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) t_1__005_
      | Push v ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons v
                       t_2__006_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 13;
                                    pos_bol = 441;
                                    pos_cnum = 466
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 13;
                                    pos_bol = 441;
                                    pos_cnum = 498
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Pop ->
          let t_3__008_ = Model.get state__003_ 0 in
          let t_3__009_ =
            let open ModelElt in
              {
                contents =
                  (try
                     if
                       (Ortac_runtime.Gospelstdlib.Sequence.length
                          t_3__008_.contents)
                         = (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                     then t_3__008_.contents
                     else
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         t_3__008_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 19;
                                    pos_bol = 732;
                                    pos_cnum = 757
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 20;
                                    pos_bol = 802;
                                    pos_cnum = 860
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_3__009_
      | Pop_opt ->
          let t_4__010_ = Model.get state__003_ 0 in
          let t_4__011_ =
            let open ModelElt in
              {
                contents =
                  (try
                     if
                       (Ortac_runtime.Gospelstdlib.Sequence.length
                          t_4__010_.contents)
                         = (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                     then t_4__010_.contents
                     else
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         t_4__010_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 27;
                                    pos_bol = 1121;
                                    pos_cnum = 1146
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 28;
                                    pos_bol = 1191;
                                    pos_cnum = 1247
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_4__011_
      | Top ->
          let t_5__012_ = Model.get state__003_ 0 in
          let t_5__013_ = t_5__012_ in
          Model.push (Model.drop_n state__003_ 1) t_5__013_
      | Top_opt ->
          let t_6__014_ = Model.get state__003_ 0 in
          let t_6__015_ = t_6__014_ in
          Model.push (Model.drop_n state__003_ 1) t_6__015_
      | Clear ->
          let t_7__016_ = Model.get state__003_ 0 in
          let t_7__017_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 46;
                                    pos_bol = 2021;
                                    pos_cnum = 2046
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 46;
                                    pos_bol = 2021;
                                    pos_cnum = 2060
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_7__017_
      | Copy ->
          let t_8__018_ = Model.get state__003_ 0 in
          let r__021_ =
            let open ModelElt in
              {
                contents =
                  (try t_8__018_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 50;
                                    pos_bol = 2191;
                                    pos_cnum = 2216
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "stack.mli";
                                    pos_lnum = 50;
                                    pos_bol = 2191;
                                    pos_cnum = 2226
                                  }
                              })))
              }
          and t_8__020_ = t_8__018_ in
          Model.push (Model.push (Model.drop_n state__003_ 1) t_8__020_)
            r__021_
      | Is_empty ->
          let t_9__022_ = Model.get state__003_ 0 in
          let t_9__023_ = t_9__022_ in
          Model.push (Model.drop_n state__003_ 1) t_9__023_
    let precond cmd__066_ state__067_ =
      match cmd__066_ with
      | Create () -> true
      | Push v -> true
      | Pop -> true
      | Pop_opt -> true
      | Top -> true
      | Top_opt -> true
      | Clear -> true
      | Copy -> true
      | Is_empty -> true
    let postcond _ _ _ = true
    let run cmd__068_ sut__069_ =
      match cmd__068_ with
      | Create () ->
          Res
            (sut,
              (let res__070_ = create () in
               (SUT.push sut__069_ res__070_; res__070_)))
      | Push v ->
          Res
            (unit,
              (let t_2__071_ = SUT.get sut__069_ 0 in
               let res__072_ = push v t_2__071_ in res__072_))
      | Pop ->
          Res
            ((result char exn),
              (let t_3__073_ = SUT.get sut__069_ 0 in
               let res__074_ = protect (fun () -> pop t_3__073_) () in
               res__074_))
      | Pop_opt ->
          Res
            ((option char),
              (let t_4__075_ = SUT.get sut__069_ 0 in
               let res__076_ = pop_opt t_4__075_ in res__076_))
      | Top ->
          Res
            ((result char exn),
              (let t_5__077_ = SUT.get sut__069_ 0 in
               let res__078_ = protect (fun () -> top t_5__077_) () in
               res__078_))
      | Top_opt ->
          Res
            ((option char),
              (let t_6__079_ = SUT.get sut__069_ 0 in
               let res__080_ = top_opt t_6__079_ in res__080_))
      | Clear ->
          Res
            (unit,
              (let t_7__081_ = SUT.get sut__069_ 0 in
               let res__082_ = clear t_7__081_ in res__082_))
      | Copy ->
          Res
            (sut,
              (let t_8__083_ = SUT.get sut__069_ 0 in
               let res__084_ = copy t_8__083_ in
               (SUT.push sut__069_ res__084_; res__084_)))
      | Is_empty ->
          Res
            (bool,
              (let t_9__085_ = SUT.get sut__069_ 0 in
               let res__086_ = is_empty t_9__085_ in res__086_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__088_ state__089_ last__091_ res__090_ =
  let open Spec in
    let open STM in
      match (cmd__088_, res__090_) with
      | (Create (), Res ((SUT, _), t_1)) ->
          let lhs = if last__091_ then "r" else SUT.get_name state__089_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Push v, Res ((Unit, _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a %s" lhs "push"
            (Util.Pp.pp_char true) v (SUT.get_name state__089_ (0 + shift))
      | (Pop, Res ((Result (Char, Exn), _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "pop"
            (SUT.get_name state__089_ (0 + shift))
      | (Pop_opt, Res ((Option (Char), _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "pop_opt"
            (SUT.get_name state__089_ (0 + shift))
      | (Top, Res ((Result (Char, Exn), _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s)" lhs "top"
            (SUT.get_name state__089_ (0 + shift))
      | (Top_opt, Res ((Option (Char), _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "top_opt"
            (SUT.get_name state__089_ (0 + shift))
      | (Clear, Res ((Unit, _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "clear"
            (SUT.get_name state__089_ (0 + shift))
      | (Copy, Res ((SUT, _), r)) ->
          let lhs = if last__091_ then "r" else SUT.get_name state__089_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %s" lhs "copy"
            (SUT.get_name state__089_ (0 + shift))
      | (Is_empty, Res ((Bool, _), _)) ->
          let lhs = if last__091_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "is_empty"
            (SUT.get_name state__089_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__024_ state__025_ res__026_ =
  let open Spec in
    let open STM in
      let new_state__027_ = lazy (next_state cmd__024_ state__025_) in
      match (cmd__024_, res__026_) with
      | (Create (), Res ((SUT, _), t_1)) -> None
      | (Push v, Res ((Unit, _), _)) -> None
      | (Pop, Res ((Result (Char, Exn), _), v_1)) ->
          (match v_1 with
           | Ok v_1 ->
               Ortac_runtime.Report.append
                 (if
                    let t_old__031_ = Model.get state__025_ 0
                    and t_new__032_ =
                      lazy (Model.get (Lazy.force new_state__027_) 0) in
                    try
                      v_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           t_old__031_.contents)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Stack" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (char,
                                   (let t_old__029_ = Model.get state__025_ 0
                                    and t_new__030_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__027_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__029_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "pop"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "stack.mli";
                                  pos_lnum = 21;
                                  pos_bol = 861;
                                  pos_cnum = 873
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "stack.mli";
                                  pos_lnum = 21;
                                  pos_bol = 861;
                                  pos_cnum = 905
                                }
                            })]))
                 (if
                    let t_old__033_ = Model.get state__025_ 0
                    and t_new__034_ =
                      lazy (Model.get (Lazy.force new_state__027_) 0) in
                    try
                      not
                        (t_old__033_.contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with | e -> false
                  then None
                  else
                    Some
                      (Ortac_runtime.Report.report "Stack" "create ()"
                         (try
                            Ortac_runtime.Report.Protected_value
                              (Res
                                 (char,
                                   (let t_old__029_ = Model.get state__025_ 0
                                    and t_new__030_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__027_) 0) in
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      t_old__029_.contents)))
                          with | e -> Ortac_runtime.Report.Out_of_domain)
                         "pop"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "stack.mli";
                                  pos_lnum = 22;
                                  pos_bol = 906;
                                  pos_cnum = 918
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "stack.mli";
                                  pos_lnum = 22;
                                  pos_bol = 906;
                                  pos_cnum = 950
                                }
                            })]))
           | Error (Empty) ->
               if
                 let t_old__035_ = Model.get state__025_ 0
                 and t_new__036_ =
                   lazy (Model.get (Lazy.force new_state__027_) 0) in
                 (try
                    let __t1__037_ =
                      (Lazy.force t_new__036_).contents =
                        t_old__035_.contents in
                    let __t2__038_ =
                      t_old__035_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__037_ && __t2__038_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Stack" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "pop"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 18;
                               pos_bol = 667;
                               pos_cnum = 687
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 18;
                               pos_bol = 667;
                               pos_cnum = 731
                             }
                         })])
           | _ -> None)
      | (Pop_opt, Res ((Option (Char), _), v_2)) ->
          if
            let t_old__042_ = Model.get state__025_ 0
            and t_new__043_ = lazy (Model.get (Lazy.force new_state__027_) 0) in
            (try
               v_2 =
                 (if
                    t_old__042_.contents =
                      Ortac_runtime.Gospelstdlib.Sequence.empty
                  then None
                  else
                    Some
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         t_old__042_.contents))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Stack" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         ((option char),
                           (let t_old__040_ = Model.get state__025_ 0
                            and t_new__041_ =
                              lazy (Model.get (Lazy.force new_state__027_) 0) in
                            if
                              t_old__040_.contents =
                                Ortac_runtime.Gospelstdlib.Sequence.empty
                            then None
                            else
                              Some
                                (Ortac_runtime.Gospelstdlib.Sequence.hd
                                   t_old__040_.contents))))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "pop_opt"
                 [("v = if (old t.contents) = Sequence.empty then\n        None else Some (Sequence.hd (old t.contents))",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 29;
                          pos_bol = 1248;
                          pos_cnum = 1260
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 30;
                          pos_bol = 1306;
                          pos_cnum = 1359
                        }
                    })])
      | (Top, Res ((Result (Char, Exn), _), v_3)) ->
          (match v_3 with
           | Ok v_3 ->
               if
                 let t_old__047_ = Model.get state__025_ 0
                 and t_new__048_ =
                   lazy (Model.get (Lazy.force new_state__027_) 0) in
                 (try
                    v_3 =
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force t_new__048_).contents)
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Stack" "create ()"
                      (try
                         Ortac_runtime.Report.Protected_value
                           (Res
                              (char,
                                (let t_old__045_ = Model.get state__025_ 0
                                 and t_new__046_ =
                                   lazy
                                     (Model.get (Lazy.force new_state__027_)
                                        0) in
                                 Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force t_new__046_).contents)))
                       with | e -> Ortac_runtime.Report.Out_of_domain) "top"
                      [("v = Sequence.hd t.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 35;
                               pos_bol = 1565;
                               pos_cnum = 1577
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 35;
                               pos_bol = 1565;
                               pos_cnum = 1603
                             }
                         })])
           | Error (Empty) ->
               if
                 let t_old__049_ = Model.get state__025_ 0
                 and t_new__050_ =
                   lazy (Model.get (Lazy.force new_state__027_) 0) in
                 (try
                    let __t1__051_ =
                      (Lazy.force t_new__050_).contents =
                        t_old__049_.contents in
                    let __t2__052_ =
                      t_old__049_.contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__051_ && __t2__052_
                  with | e -> false)
               then None
               else
                 Some
                   (Ortac_runtime.Report.report "Stack" "create ()"
                      (try Ortac_runtime.Report.Exception "Empty"
                       with | e -> Ortac_runtime.Report.Out_of_domain) "top"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 34;
                               pos_bol = 1500;
                               pos_cnum = 1520
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "stack.mli";
                               pos_lnum = 34;
                               pos_bol = 1500;
                               pos_cnum = 1564
                             }
                         })])
           | _ -> None)
      | (Top_opt, Res ((Option (Char), _), v_4)) ->
          if
            let t_old__054_ = Model.get state__025_ 0
            and t_new__055_ = lazy (Model.get (Lazy.force new_state__027_) 0) in
            (try
               (match v_4 with
                | None ->
                    if
                      (Lazy.force t_new__055_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then true
                    else false
                | Some x ->
                    if
                      x =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force t_new__055_).contents)
                    then true
                    else false)
                 = true
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Stack" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res (Ortac_runtime.Report.dummy, ()))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "top_opt"
                 [("match v with\n        | None -> t.contents = Sequence.empty\n        | Some x -> x = Sequence.hd t.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 39;
                          pos_bol = 1744;
                          pos_cnum = 1756
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 41;
                          pos_bol = 1815;
                          pos_cnum = 1861
                        }
                    })])
      | (Clear, Res ((Unit, _), _)) -> None
      | (Copy, Res ((SUT, _), r)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let t_old__062_ = Model.get state__025_ 0
            and t_new__063_ = lazy (Model.get (Lazy.force new_state__027_) 0) in
            (try
               b =
                 (match Ortac_runtime.Gospelstdlib.Sequence.length
                          (Lazy.force t_new__063_).contents
                  with
                  | __x__064_ when
                      (=) __x__064_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> true
                  | _ -> false)
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Stack" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (bool,
                           (let t_old__059_ = Model.get state__025_ 0
                            and t_new__060_ =
                              lazy (Model.get (Lazy.force new_state__027_) 0) in
                            match Ortac_runtime.Gospelstdlib.Sequence.length
                                    (Lazy.force t_new__060_).contents
                            with
                            | __x__061_ when
                                (=) __x__061_
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     0)
                                -> true
                            | _ -> false)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "is_empty"
                 [("b = match Sequence.length t.contents with\n        | 0 -> true\n        | _ -> false",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 54;
                          pos_bol = 2361;
                          pos_cnum = 2373
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "stack.mli";
                          pos_lnum = 56;
                          pos_bol = 2435;
                          pos_cnum = 2455
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Stack STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
