(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Ref
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = make 42 end)
module ModelElt =
  struct
    type nonrec elt = {
      value: int }
    let init =
      let v = 42 in
      {
        value =
          (try v
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 188;
                            pos_cnum = 210
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 188;
                            pos_cnum = 211
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int 
      | Get 
      | Set of int 
      | Incr 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make v -> Format.asprintf "%s %a" "make" (Util.Pp.pp_int true) v
      | Get -> Format.asprintf "%s <sut>" "get"
      | Set v_1 ->
          Format.asprintf "%s <sut> %a" "set" (Util.Pp.pp_int true) v_1
      | Incr -> Format.asprintf "%s <sut>" "incr"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun v -> Make v)) <*> small_signed_int;
               pure Get;
               (pure (fun v_1 -> Set v_1)) <*> int;
               pure Incr])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make v ->
          let r__005_ =
            let open ModelElt in
              {
                value =
                  (try v
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 6;
                                    pos_bol = 188;
                                    pos_cnum = 210
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 6;
                                    pos_bol = 188;
                                    pos_cnum = 211
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) r__005_
      | Get ->
          let r_1__006_ = Model.get state__003_ 0 in
          let r_1__007_ = r_1__006_ in
          Model.push (Model.drop_n state__003_ 1) r_1__007_
      | Set v_1 ->
          let r_2__008_ = Model.get state__003_ 0 in
          let r_2__009_ =
            let open ModelElt in
              {
                value =
                  (try v_1
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 16;
                                    pos_bol = 482;
                                    pos_cnum = 504
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 16;
                                    pos_bol = 482;
                                    pos_cnum = 505
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) r_2__009_
      | Incr ->
          let r_3__010_ = Model.get state__003_ 0 in
          let r_3__011_ = r_3__010_ in
          Model.push (Model.drop_n state__003_ 1) r_3__011_
    let precond cmd__025_ state__026_ =
      match cmd__025_ with
      | Make v -> true
      | Get -> true
      | Set v_1 -> true
      | Incr -> true
    let postcond _ _ _ = true
    let run cmd__027_ sut__028_ =
      match cmd__027_ with
      | Make v ->
          Res
            (sut,
              (let res__029_ = make v in
               (SUT.push sut__028_ res__029_; res__029_)))
      | Get ->
          Res
            (int,
              (let r_1__030_ = SUT.get sut__028_ 0 in
               let res__031_ = get r_1__030_ in res__031_))
      | Set v_1 ->
          Res
            (unit,
              (let r_2__032_ = SUT.get sut__028_ 0 in
               let res__033_ = set r_2__032_ v_1 in res__033_))
      | Incr ->
          Res
            (unit,
              (let r_3__034_ = SUT.get sut__028_ 0 in
               let res__035_ = incr r_3__034_ in res__035_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__037_ state__038_ last__040_ res__039_ =
  let open Spec in
    let open STM in
      match (cmd__037_, res__039_) with
      | (Make v, Res ((SUT, _), r)) ->
          let lhs = if last__040_ then "r" else SUT.get_name state__038_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "make" (Util.Pp.pp_int true) v
      | (Get, Res ((Int, _), _)) ->
          let lhs = if last__040_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "get"
            (SUT.get_name state__038_ (0 + shift))
      | (Set v_1, Res ((Unit, _), _)) ->
          let lhs = if last__040_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "set"
            (SUT.get_name state__038_ (0 + shift)) (Util.Pp.pp_int true) v_1
      | (Incr, Res ((Unit, _), _)) ->
          let lhs = if last__040_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "incr"
            (SUT.get_name state__038_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__012_ state__013_ res__014_ =
  let open Spec in
    let open STM in
      let new_state__015_ = lazy (next_state cmd__012_ state__013_) in
      match (cmd__012_, res__014_) with
      | (Make v, Res ((SUT, _), r)) -> None
      | (Get, Res ((Int, _), v_2)) ->
          if
            let r_old__018_ = Model.get state__013_ 0
            and r_new__019_ = lazy (Model.get (Lazy.force new_state__015_) 0) in
            (try v_2 = (Lazy.force r_new__019_).value with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.report "Ref" "make 42"
                 (try
                    Ortac_runtime.Value
                      (Res
                         (int,
                           (let r_old__016_ = Model.get state__013_ 0
                            and r_new__017_ =
                              lazy (Model.get (Lazy.force new_state__015_) 0) in
                            (Lazy.force r_new__017_).value)))
                  with | e -> Ortac_runtime.Out_of_domain) "get"
                 [("v = r.value",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 325;
                          pos_cnum = 337
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 325;
                          pos_cnum = 348
                        }
                    })])
      | (Set v_1, Res ((Unit, _), _)) -> None
      | (Incr, Res ((Unit, _), _)) ->
          if
            let r_old__022_ = Model.get state__013_ 0
            and r_new__023_ = lazy (Model.get (Lazy.force new_state__015_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int
                  (Lazy.force r_new__023_).value)
                 =
                 (Ortac_runtime.Gospelstdlib.succ
                    (Ortac_runtime.Gospelstdlib.integer_of_int
                       r_old__022_.value))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.report "Ref" "make 42"
                 (try Ortac_runtime.Value (Res (unit, ()))
                  with | e -> Ortac_runtime.Out_of_domain) "incr"
                 [("r.value = succ (old r.value)",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 21;
                          pos_bol = 634;
                          pos_cnum = 646
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 21;
                          pos_bol = 634;
                          pos_cnum = 674
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Ref STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
