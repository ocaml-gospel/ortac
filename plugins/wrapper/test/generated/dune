(test
 (name test)
 (package ortac-wrapper)
 (libraries alcotest ortac-runtime)
 (instrumentation
  (backend bisect_ppx)))

(cram
 (package ortac-wrapper)
 (deps
  (package ortac-core)
  (package ortac-wrapper)))

(rule
 (copy set.mli set_wrapped.mli))

(rule
 (target set_wrapped.ml)
 (package ortac-wrapper)
 (deps
  (package ortac-core)
  (package ortac-wrapper))
 (action
  (setenv
   ORTAC_ONLY_PLUGIN
   wrapper
   (with-stderr-to
    set_errors
    (run ortac wrapper -o %{target} %{dep:set.mli})))))

(rule
 (alias runtest)
 (package ortac-wrapper)
 (action
  (progn
   (diff set_errors.expected set_errors)
   (diff set_wrapped.expected.ml set_wrapped.ml))))

(rule
 (copy runtime_assertion_checking.mli runtime_assertion_checking_wrapped.mli))

(rule
 (target runtime_assertion_checking_wrapped.ml)
 (package ortac-wrapper)
 (deps
  (package ortac-core)
  (package ortac-wrapper))
 (action
  (setenv
   ORTAC_ONLY_PLUGIN
   wrapper
   (with-stderr-to
    runtime_assertion_checking_errors
    (run ortac wrapper -o %{target} %{dep:runtime_assertion_checking.mli})))))

(rule
 (alias runtest)
 (package ortac-wrapper)
 (action
  (progn
   (diff
    runtime_assertion_checking_errors.expected
    runtime_assertion_checking_errors)
   (diff
    runtime_assertion_checking_wrapped.expected.ml
    runtime_assertion_checking_wrapped.ml))))

(rule
 (copy model.mli model_wrapped.mli))

(rule
 (target model_wrapped.ml)
 (package ortac-wrapper)
 (deps
  (package ortac-core)
  (package ortac-wrapper))
 (action
  (setenv
   ORTAC_ONLY_PLUGIN
   wrapper
   (with-stderr-to
    model_wrapped
    (run ortac wrapper -o %{target} %{dep:model.mli})))))

(rule
 (alias runtest)
 (package ortac-wrapper)
 (action
  (progn
   (diff model_wrapped.expected model_wrapped)
   (diff model_wrapped.expected.ml model_wrapped.ml))))

(rule
 (copy pascal.mli pascal_wrapped.mli))

(rule
 (target pascal_wrapped.ml)
 (package ortac-wrapper)
 (deps
  (package ortac-core)
  (package ortac-wrapper))
 (action
  (setenv
   ORTAC_ONLY_PLUGIN
   wrapper
   (with-stderr-to
    pascal_errors
    (run ortac wrapper -o %{target} %{dep:pascal.mli})))))

(rule
 (alias runtest)
 (package ortac-wrapper)
 (action
  (progn
   (diff pascal_errors.expected pascal_errors)
   (diff pascal_wrapped.expected.ml pascal_wrapped.ml))))
