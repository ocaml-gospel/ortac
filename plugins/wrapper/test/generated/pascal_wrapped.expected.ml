(* This file is generated by ortac wrapper,
   edit the original interface file instead *)
include Pascal
module Ortac_runtime = Ortac_runtime
let __projection_n__001_ __arg0 =
  let __error__005_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 10;
            pos_bol = 617;
            pos_cnum = 617
          };
        Ortac_runtime.stop =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 10;
            pos_bol = 617;
            pos_cnum = 648
          }
      } "__projection_n__001_" in
  let result =
    try n __arg0
    with
    | Stack_overflow | Out_of_memory as e ->
        (Ortac_runtime.Errors.report __error__005_; raise e)
    | e ->
        ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
           |> (Ortac_runtime.Errors.register __error__005_);
         Ortac_runtime.Errors.report __error__005_;
         raise e) in
  Ortac_runtime.Errors.report __error__005_; result
let __projection_row__002_ __arg0_1 =
  let __error__006_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 11;
            pos_bol = 649;
            pos_cnum = 649
          };
        Ortac_runtime.stop =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 11;
            pos_bol = 649;
            pos_cnum = 687
          }
      } "__projection_row__002_" in
  let result_1 =
    try row __arg0_1
    with
    | Stack_overflow | Out_of_memory as e ->
        (Ortac_runtime.Errors.report __error__006_; raise e)
    | e ->
        ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
           |> (Ortac_runtime.Errors.register __error__006_);
         Ortac_runtime.Errors.report __error__006_;
         raise e) in
  Ortac_runtime.Errors.report __error__006_; result_1
let rec __logical_comb_aux__003_ c n i k =
  if Ortac_runtime.Gospelstdlib.(>) i k
  then c
  else
    __logical_comb_aux__003_
      (Ortac_runtime.Gospelstdlib.(/) (Ortac_runtime.Gospelstdlib.( * ) c n)
         i)
      (Ortac_runtime.Gospelstdlib.(-) n
         (Ortac_runtime.Gospelstdlib.integer_of_int 1))
      (Ortac_runtime.Gospelstdlib.(+) i
         (Ortac_runtime.Gospelstdlib.integer_of_int 1)) k
let __logical_comb__004_ n_1 k_1 =
  __logical_comb_aux__003_ (Ortac_runtime.Gospelstdlib.integer_of_int 1) n_1
    (Ortac_runtime.Gospelstdlib.integer_of_int 1) k_1
let init () =
  let __error__007_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 12;
            pos_bol = 688;
            pos_cnum = 688
          };
        Ortac_runtime.stop =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 14;
            pos_bol = 799;
            pos_cnum = 821
          }
      } "init" in
  Ortac_runtime.Errors.report __error__007_;
  (let r =
     try init ()
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__007_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__007_);
          Ortac_runtime.Errors.report __error__007_;
          raise e) in
   if
     not
       (try
          (Ortac_runtime.Gospelstdlib.integer_of_int (__projection_n__001_ r))
            = (Ortac_runtime.Gospelstdlib.integer_of_int 0)
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                { term = "r.n = 0"; term_kind = Post; exn = e })
               |> (Ortac_runtime.Errors.register __error__007_);
             true))
   then
     (Ortac_runtime.Violated_condition { term = "r.n = 0"; term_kind = Post })
       |> (Ortac_runtime.Errors.register __error__007_);
   Ortac_runtime.Errors.report __error__007_;
   r)
let next r_1 =
  let __error__008_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 16;
            pos_bol = 823;
            pos_cnum = 823
          };
        Ortac_runtime.stop =
          {
            pos_fname = "pascal.mli";
            pos_lnum = 20;
            pos_bol = 1015;
            pos_cnum = 1078
          }
      } "next" in
  let ___ortac_copy_1 = Ortac_runtime.copy r_1 in
  Ortac_runtime.Errors.report __error__008_;
  (let () =
     try next r_1
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__008_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__008_);
          Ortac_runtime.Errors.report __error__008_;
          raise e) in
   if
     not
       (try
          Ortac_runtime.Z.forall
            (Ortac_runtime.Gospelstdlib.integer_of_int 0)
            (Ortac_runtime.Gospelstdlib.integer_of_int
               (__projection_n__001_ r_1))
            (fun i_1 ->
               (Ortac_runtime.Gospelstdlib.integer_of_int
                  (Ortac_runtime.Gospelstdlib.__mix_Bub
                     (Ortac_runtime.Gospelstdlib.List.to_seq
                        (__projection_row__002_ r_1)) i_1))
                 =
                 (__logical_comb__004_
                    (Ortac_runtime.Gospelstdlib.integer_of_int
                       (__projection_n__001_ r_1)) i_1))
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                {
                  term = "forall i. 0 <= i <= r.n -> r.row[i] = comb r.n i";
                  term_kind = Post;
                  exn = e
                })
               |> (Ortac_runtime.Errors.register __error__008_);
             true))
   then
     (Ortac_runtime.Violated_condition
        {
          term = "forall i. 0 <= i <= r.n -> r.row[i] = comb r.n i";
          term_kind = Post
        })
       |> (Ortac_runtime.Errors.register __error__008_);
   if
     not
       (try
          (Ortac_runtime.Gospelstdlib.integer_of_int
             (__projection_n__001_ r_1))
            =
            (Ortac_runtime.Gospelstdlib.(+)
               (Ortac_runtime.Gospelstdlib.integer_of_int
                  (__projection_n__001_ ___ortac_copy_1))
               (Ortac_runtime.Gospelstdlib.integer_of_int 1))
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                { term = "r.n = old r.n + 1"; term_kind = Post; exn = e })
               |> (Ortac_runtime.Errors.register __error__008_);
             true))
   then
     (Ortac_runtime.Violated_condition
        { term = "r.n = old r.n + 1"; term_kind = Post })
       |> (Ortac_runtime.Errors.register __error__008_);
   Ortac_runtime.Errors.report __error__008_;
   ())
