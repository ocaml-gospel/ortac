(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Treiber_stack_spec
module Ortac_runtime = Ortac_runtime_qcheck_stm_domain
let seq_is_empty s =
  try s = Ortac_runtime.Gospelstdlib.Sequence.empty
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "treiber_stack_spec.mli";
                   pos_lnum = 9;
                   pos_bol = 301;
                   pos_cnum = 308
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "treiber_stack_spec.mli";
                   pos_lnum = 9;
                   pos_bol = 301;
                   pos_cnum = 326
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = create () end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "treiber_stack_spec.mli";
                            pos_lnum = 18;
                            pos_bol = 1046;
                            pos_cnum = 1071
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "treiber_stack_spec.mli";
                            pos_lnum = 18;
                            pos_bol = 1046;
                            pos_cnum = 1085
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = nat
                            let list = small_list end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of unit 
      | Of_list of int list 
      | Is_empty 
      | Peek_opt 
      | Pop_opt 
      | Pop_all 
      | Push of int 
      | Push_all of int list 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Of_list xs ->
          Format.asprintf "%s %a" "of_list"
            (Util.Pp.pp_list Util.Pp.pp_int true) xs
      | Is_empty -> Format.asprintf "%s <sut>" "is_empty"
      | Peek_opt -> Format.asprintf "%s <sut>" "peek_opt"
      | Pop_opt -> Format.asprintf "%s <sut>" "pop_opt"
      | Pop_all -> Format.asprintf "%s <sut>" "pop_all"
      | Push x ->
          Format.asprintf "%s <sut> %a" "push" (Util.Pp.pp_int true) x
      | Push_all xs_1 ->
          Format.asprintf "%s <sut> %a" "push_all"
            (Util.Pp.pp_list Util.Pp.pp_int true) xs_1
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun () -> Create ())) <*> unit;
               (pure (fun xs -> Of_list xs)) <*> (list small_signed_int);
               pure Is_empty;
               pure Peek_opt;
               pure Pop_opt;
               pure Pop_all;
               (pure (fun x -> Push x)) <*> int;
               (pure (fun xs_1 -> Push_all xs_1)) <*> (list int)])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create () ->
          let a_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 18;
                                    pos_bol = 1046;
                                    pos_cnum = 1071
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 18;
                                    pos_bol = 1046;
                                    pos_cnum = 1085
                                  }
                              })))
              } in
          Model.drop_n state__003_ 0
      | Of_list xs ->
          let a_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.List.to_seq xs
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 23;
                                    pos_bol = 1451;
                                    pos_cnum = 1476
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 23;
                                    pos_bol = 1451;
                                    pos_cnum = 1490
                                  }
                              })))
              } in
          Model.drop_n state__003_ 0
      | Is_empty ->
          let a_3__008_ = Model.get state__003_ 0 in
          let a_3__009_ = a_3__008_ in
          Model.push (Model.drop_n state__003_ 1) a_3__009_
      | Peek_opt ->
          let a_4__010_ = Model.get state__003_ 0 in
          let a_4__011_ = a_4__010_ in
          Model.push (Model.drop_n state__003_ 1) a_4__011_
      | Pop_opt ->
          let a_5__012_ = Model.get state__003_ 0 in
          let a_5__013_ =
            let open ModelElt in
              {
                contents =
                  (try
                     if seq_is_empty a_5__012_.contents
                     then Ortac_runtime.Gospelstdlib.Sequence.empty
                     else
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         a_5__012_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 60;
                                    pos_bol = 3284;
                                    pos_cnum = 3309
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 62;
                                    pos_bol = 3387;
                                    pos_cnum = 3445
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) a_5__013_
      | Pop_all ->
          let a_6__014_ = Model.get state__003_ 0 in
          let a_6__015_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.empty
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 91;
                                    pos_bol = 4359;
                                    pos_cnum = 4384
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 91;
                                    pos_bol = 4359;
                                    pos_cnum = 4398
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) a_6__015_
      | Push x ->
          let a_7__016_ = Model.get state__003_ 0 in
          let a_7__017_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons x
                       a_7__016_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 100;
                                    pos_bol = 4879;
                                    pos_cnum = 4904
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 100;
                                    pos_bol = 4879;
                                    pos_cnum = 4936
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) a_7__017_
      | Push_all xs_1 ->
          let a_8__018_ = Model.get state__003_ 0 in
          let a_8__019_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.(++)
                       (Ortac_runtime.Gospelstdlib.Sequence.rev
                          (Ortac_runtime.Gospelstdlib.List.to_seq xs_1))
                       a_8__018_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 121;
                                    pos_bol = 5662;
                                    pos_cnum = 5717
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "treiber_stack_spec.mli";
                                    pos_lnum = 121;
                                    pos_bol = 5662;
                                    pos_cnum = 5719
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) a_8__019_
    let precond cmd__046_ state__047_ =
      match cmd__046_ with
      | Create () -> true
      | Of_list xs -> true
      | Is_empty -> true
      | Peek_opt -> true
      | Pop_opt -> true
      | Pop_all -> true
      | Push x -> true
      | Push_all xs_1 -> true
    let postcond _ _ _ = true
    let run cmd__048_ sut__049_ =
      match cmd__048_ with
      | Create () -> Res (sut, (let res__050_ = create () in res__050_))
      | Of_list xs -> Res (sut, (let res__051_ = of_list xs in res__051_))
      | Is_empty ->
          Res
            (bool,
              (let a_3__052_ = SUT.get sut__049_ 0 in
               let res__053_ = is_empty a_3__052_ in res__053_))
      | Peek_opt ->
          Res
            ((option int),
              (let a_4__054_ = SUT.get sut__049_ 0 in
               let res__055_ = peek_opt a_4__054_ in res__055_))
      | Pop_opt ->
          Res
            ((option int),
              (let a_5__056_ = SUT.get sut__049_ 0 in
               let res__057_ = pop_opt a_5__056_ in res__057_))
      | Pop_all ->
          Res
            ((list int),
              (let a_6__058_ = SUT.get sut__049_ 0 in
               let res__059_ = pop_all a_6__058_ in res__059_))
      | Push x ->
          Res
            (unit,
              (let a_7__060_ = SUT.get sut__049_ 0 in
               let res__061_ = push a_7__060_ x in res__061_))
      | Push_all xs_1 ->
          Res
            (unit,
              (let a_8__062_ = SUT.get sut__049_ 0 in
               let res__063_ = push_all a_8__062_ xs_1 in res__063_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__065_ models__066_ last__068_ res__067_ =
  let open Spec in
    let open STM in
      match (cmd__065_, res__067_) with
      | (Create (), Res ((SUT, _), a_1)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Of_list xs, Res ((SUT, _), a_2)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %a" lhs "of_list"
            (Util.Pp.pp_list Util.Pp.pp_int true) xs
      | (Is_empty, Res ((Bool, _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "is_empty"
            (Model.get_name models__066_ (0 + shift))
      | (Peek_opt, Res ((Option (Int), _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "peek_opt"
            (Model.get_name models__066_ (0 + shift))
      | (Pop_opt, Res ((Option (Int), _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "pop_opt"
            (Model.get_name models__066_ (0 + shift))
      | (Pop_all, Res ((List (Int), _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "pop_all"
            (Model.get_name models__066_ (0 + shift))
      | (Push x, Res ((Unit, _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "push"
            (Model.get_name models__066_ (0 + shift)) (Util.Pp.pp_int true) x
      | (Push_all xs_1, Res ((Unit, _), _)) ->
          let lhs = if last__068_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "push_all"
            (Model.get_name models__066_ (0 + shift))
            (Util.Pp.pp_list Util.Pp.pp_int true) xs_1
      | _ -> assert false
let ortac_postcond cmd__020_ state__021_ res__022_ =
  let open Spec in
    let open STM in
      let new_state__023_ = lazy (next_state cmd__020_ state__021_) in
      match (cmd__020_, res__022_) with
      | (Create (), Res ((SUT, _), a_1)) -> None
      | (Of_list xs, Res ((SUT, _), a_2)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let a_old__026_ = Model.get state__021_ 0
            and a_new__027_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try
               (b = true) = (seq_is_empty (Lazy.force a_new__027_).contents)
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Treiber_stack_spec" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         (bool,
                           (let a_old__024_ = Model.get state__021_ 0
                            and a_new__025_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            seq_is_empty (Lazy.force a_new__025_).contents)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "is_empty"
                 [("b = seq_is_empty a.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 29;
                          pos_bol = 1814;
                          pos_cnum = 1826
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 29;
                          pos_bol = 1814;
                          pos_cnum = 1853
                        }
                    })])
      | (Peek_opt, Res ((Option (Int), _), o)) ->
          if
            let a_old__031_ = Model.get state__021_ 0
            and a_new__032_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try
               o =
                 (if seq_is_empty (Lazy.force a_new__032_).contents
                  then None
                  else
                    Some
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         (Lazy.force a_new__032_).contents))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Treiber_stack_spec" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         ((option int),
                           (let a_old__029_ = Model.get state__021_ 0
                            and a_new__030_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            if seq_is_empty (Lazy.force a_new__030_).contents
                            then None
                            else
                              Some
                                (Ortac_runtime.Gospelstdlib.Sequence.hd
                                   (Lazy.force a_new__030_).contents))))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "peek_opt"
                 [("o = if seq_is_empty a.contents\n                then None\n                else Some (Sequence.hd a.contents)",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 46;
                          pos_bol = 2579;
                          pos_cnum = 2591
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 48;
                          pos_bol = 2648;
                          pos_cnum = 2698
                        }
                    })])
      | (Pop_opt, Res ((Option (Int), _), o_1)) ->
          if
            let a_old__036_ = Model.get state__021_ 0
            and a_new__037_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try
               o_1 =
                 (if seq_is_empty a_old__036_.contents
                  then None
                  else
                    Some
                      (Ortac_runtime.Gospelstdlib.Sequence.hd
                         a_old__036_.contents))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Treiber_stack_spec" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         ((option int),
                           (let a_old__034_ = Model.get state__021_ 0
                            and a_new__035_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            if seq_is_empty a_old__034_.contents
                            then None
                            else
                              Some
                                (Ortac_runtime.Gospelstdlib.Sequence.hd
                                   a_old__034_.contents))))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "pop_opt"
                 [("o = if seq_is_empty (old a.contents)\n                then None\n                else Some (Sequence.hd (old a.contents))",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 63;
                          pos_bol = 3446;
                          pos_cnum = 3458
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 65;
                          pos_bol = 3521;
                          pos_cnum = 3577
                        }
                    })])
      | (Pop_all, Res ((List (Int), _), xs_2)) ->
          if
            let a_old__041_ = Model.get state__021_ 0
            and a_new__042_ = lazy (Model.get (Lazy.force new_state__023_) 0) in
            (try
               xs_2 =
                 (Ortac_runtime.Gospelstdlib.List.of_seq a_old__041_.contents)
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.Report.report "Treiber_stack_spec" "create ()"
                 (try
                    Ortac_runtime.Report.Value
                      (Res
                         ((list int),
                           (let a_old__039_ = Model.get state__021_ 0
                            and a_new__040_ =
                              lazy (Model.get (Lazy.force new_state__023_) 0) in
                            Ortac_runtime.Gospelstdlib.List.of_seq
                              a_old__039_.contents)))
                  with | e -> Ortac_runtime.Report.Out_of_domain) "pop_all"
                 [("xs = List.of_seq (old a.contents)",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 92;
                          pos_bol = 4399;
                          pos_cnum = 4411
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "treiber_stack_spec.mli";
                          pos_lnum = 92;
                          pos_bol = 4399;
                          pos_cnum = 4444
                        }
                    })])
      | (Push x, Res ((Unit, _), _)) -> None
      | (Push_all xs_1, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 500 in
     [STMTests.agree_test ~count ~name:"Treiber_stack_spec STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
